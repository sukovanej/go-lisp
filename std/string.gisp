; ========================================
; ADVANCED STRING LIBRARY
; ========================================

(set WHITE-SPACES [" " "\n" "\t"])
(set ALPHA-CHARACTERS (map str [1 2 3 4 5 6 7 8 9]))


(defn starts-with (sub-str str)
    ; tests whether the string starts with a given substring
    ; >> (starts-with "hello world" "hell")
    ; #t
    (cond 
        (empty sub-str) #t
        (or (empty str) (!= (first str) (first sub-str))) #f
        (== (first str) (first sub-str)) (starts-with (tail sub-str) (tail str))))


(defn is-alpha (str)
    ; return true if the string contains only numbers
    ; >> (is-alpha "123")
    ; #t
    (defn _is-alpha (str)
        (cond 
            (empty str) #t
            (not (one-of (first str) ALPHA-CHARACTERS)) #f
            (one-of (first str) ALPHA-CHARACTERS) (_is-alpha (tail str))))
    (if (empty str) #f (_is-alpha str)))

(defn words (str)
    ; split the string by words
    ; >> (words "hello world")
    ; ["hello" "world"]
    (split " " str))


(defn lines (str)
    ; split the string by words
    ; >> (lines "hello\nworld")
    ; ["hello" "world"]
    (split "\n" str))


(defn columnize (str)
    ; split the string lines and each line by words
    ; >> (lines "hello\nworld")
    ; ["hello" "world"]
    (map (fn (l) 
        (words l)) (lines str)))
